      subroutine ckd1_init
c *********************************************************************
c hk is the interval in the g (cumulative probability) space from 0 to 
c one. fko3 is the corresponding ozone absorption coefficient in units
c of (cm-atm)**-1 (Fu, 1991). The spectral region is from 50000 cm**-1 
c to 14500 cm**-1.
c *********************************************************************
c      data hk / .24, .16, .24, .28, .03, 
c     1            .016, .01, .008, .008, .008 /
c      data fko3 / .2204e-08,.1207e-01,.4537e-01,.1032e+00,.1740e+00,
c     1           .1210e+01,.7367e+01,.2050e+02,.8100e+02,.2410e+03 /
c *********************************************************************
c The treatment of O3 absorption here is modified to consider  the
c dependence of aerosol single-scattering properties on wavelength
c in the first band.  We divide this band into 10 subintervals  as
c 175.439 - 224.719 - 243.902 - 285.714 - 298.507 - 322.500 -
c 357.500 - 437.500 - 497.500 - 595.000 - 692.500 following Grant
c (personal communication, 1996).
c *********************************************************************
c---------- 4/1/97 (6)
       USE FUINPUT, only : mbsx,mby,fi

       common /band1/ hk(mby), fko3(mby),sol_spect(0:mbsx+1),fkh2o(mby)
       
	real ,dimension(mby):: fko3_1,fko3_2,fko3_3,fko3_4

!!!   OLD FU Ozone Coefficients
      fko3_1 = (/ .2751e+02,.1564e+03,.1746e+03,.2684e+02,.1962e+01,
     1            .7402e-01,.7295e-03,.1239e-01,.8011e-01,.8011e-01 /)

!!! RECOMPUTED FROM 111 SUBBAND FU CODE.
!!! ENERGY WEIGHTED - Linear Average
!!!    fko3_2 = ( /3.87E+01,1.66E+02,1.94E+02,2.93E+01,3.22E+00,
!!!     1            8.38E-02,7.38E-04,1.25E-02,8.45E-02,7.88E-02/)   
!!! ENERGY WEIGHTED - LOG Average
!!!	fko3_3 =( /3.28E+01,1.56E+02,1.75E+02,2.70E+01,2.19E+00,
!!!   &		   2.98E-02,1.94E-04,1.02E-02,7.76E-02,7.19E-02/)
!!! ENERGY WEIGHTED - LOG(1-6) Lin(7-10) Average
!!!	data fko3_4 /3.28E+01,1.56E+02,1.75E+02,2.70E+01,2.19E+00,
!!!     &	     2.98E-02,7.38E-04,1.25E-02,8.45E-02,7.88E-02/

!!! ENERGY WEIGHTED - LOG(1-5) Lin(6-10) Average
	 fko3_4 = (/3.28E+01,1.56E+02,1.75E+02,2.70E+01,2.19E+00,
     &		    8.38E-02,7.38E-04,1.25E-02,8.45E-02,7.88E-02/)

! CHOU
!       data fkh2o / 6*0.0,4*0.00075 /
! Q.Fu
        fkh2o=(/0.,0.,0.,0.,0.,0.,0.,7.63E-05,1.90E-03,2.57E-03/)
	
! SOLAR SPECTRA Choice::


	 fko3=fko3_4  !!! LOG & Lin wgt



!-----------------------------------------------------------------------
        !!!  Mod3.7_Newkur       
      if ( fi%nirold(1)  )then
	sol_spect =(  /1367.997, 
     &  630.4398,
!     &  487.0527,
     &  135.216 , 97.409 , 120.230, 134.198,  153.6277,  !1.3
!     &   135.216 , 97.409 , 120.230, 175.966,  111.859,   !1.41
     & 51.0688, 28.3879, 5.5239,
     &  11.8957 / )

      else
	sol_spect =(  /1367.997, 
     &  630.4398,
!     &  487.0527,
!     &  135.216 , 97.409 , 120.230, 134.198,  153.6277,  !1.3
     &   135.216 , 97.409 , 120.230, 175.966,  111.859,   !1.41
     & 51.0688, 28.3879, 5.5239,
     &  11.8957 / )
	endif



        hk =( /
     &   0.00127,0.00142,0.01142,0.01087,0.02440,
     &   0.05532,0.17325,0.19032,0.28889,0.24283/ )
 
      end
!=====================================================================

      block data rayle1
c  *************************************************************
c  ri is the coefficient in Eq.(4.8) of Fu (1991) to compute the 
c  optical depth due to Rayleigh scattering in the solar bands.
c  *************************************************************
      USE FUINPUT
      implicit none

      real ri,riy 

      common /ray1/ ri(mbsx),riy(10)

!      data ri / 0.9022e-5, 0.5282e-6, 0.5722e-7,
!     1                0.1433e-7, 0.4526e-8, 0.1529e-8 /
!       data ri / 0.9022e-5,
!     & 1.010E-06, 6.019E-07, 3.528E-07, 1.686E-07,
!     & 0.5722e-7, 0.1433e-7, 0.4526e-8, 0.1529e-8 / !! NEW mbsx=9 1.3



!!! RECOMPUTED FROM 111 SUBBAND FU CODE.
!!!  ENERGY WEIGHTED - LINEAR Averaging
!	data rix / 1.775E-04,1.222E-04,6.606E-05,4.588E-05,3.524E-05,
!     &             2.420E-05,1.244E-05,6.510E-06,3.475E-06,1.792E-06/


!!! FU Thesis Method Edlen 1953
!      data ri / 0.9022e-5,
!     & 0.1010E-05,0.6019E-06,0.3528E-06,0.1497E-06,0.4547E-07,
!     &            0.1439E-07,0.4505E-08,0.1520E-08/ !! NEW mbsx=9 1.41


!!!  ENERGY WEIGHTED - LOG(1-7) Lin(8-10) Averaging
!	data riy / 1.761E-04,1.214E-04,6.512E-05,4.583E-05,3.510E-05,
!     &             2.401E-05,1.209E-05, 6.510E-06,3.475E-06,1.792E-06/

!Jin Shettle(1980) 
	data riy /1.7523E-04,1.2019E-04,6.4508E-05,4.5392E-05,3.4748E-05,
     &          2.3760E-05,1.1951E-05,6.4348E-06,3.4628E-06,1.7880E-06/     
	 data ri / 0.9022e-5,
     & 9.9740E-07,5.9454E-07,3.4847E-07,1.4788E-07,4.4898E-08,
     & 1.4207E-08,4.4474E-09,1.5011E-09/



      end
c=======================================================================
      subroutine rayle ( ib, ig )
c  ****************************************************************
c  tr, wr, and wwr are the optical depth, single scattering albedo,
c  and expansion coefficients of the phase function ( 1, 2, 3, and
c  4 ) due to the Rayleigh scattering for a given layer.
c  ****************************************************************
      USE FUINPUT
      implicit none

      integer i,ib,ig
      real ri,trp,tr,wr,wwr,x,riy

      common /ray1/ ri(mbsx),riy(10)
      common /ray2/ trp(nvx)
      common /ray/ tr(nvx), wr(nvx), wwr(nvx,4)
      
      real riold(mbsx)
      data riold / 0.9022e-5,
     &  0.5282e-6, 0.5282e-6,0.5282e-6,0.5282e-6,
     &  0.5722e-7, 0.1433e-7, 0.4526e-8, 0.1529e-8 /!! TEST const in2:5of mbsx=9

      if ( ib .le. mbs ) then
        if ( ib .eq. 1 ) then
	     x = riy(ig) !LOG & Lin
        else
          x    = ri(ib)
	  if ( fi%nirold(1)  )x = riold(ib)  !!TEST !!!

        endif
!!!!	x=1.0E-09 !!! ZERO RAYLEIGH
        do i = 1, nv
         tr(i) = trp(i) * x
         wr(i) = 1.0
         wwr(i,1) = 0.0
         wwr(i,2) = 0.5
         wwr(i,3) = 0.0
         wwr(i,4) = 0.0
         end do
      else
        do i = 1, nv
         tr(i) = 0.0
         wr(i) = 0.0
         wwr(i,1) = 0.0
         wwr(i,2) = 0.0
         wwr(i,3) = 0.0
         wwr(i,4) = 0.0
         end do
      endif

      return
      end      
c=======================================================================
      subroutine rayle2 
c  *******************************************************************
c  trp is P(mb)/T(K)*DZ(m) and the constant 14.6337=R(287)/g(9.806)/2.
c  *******************************************************************
      USE FUINPUT
      implicit none
      integer i
      real trp

      common /ray2/ trp(nvx)

      do 100 i = 1, nv
       trp(i) = 14.6337 * ( pp(i) + pp(i+1) )
     1          * alog( pp(i+1) / pp(i) ) 
100    continue
      return
      end


!===========================================================
	subroutine fu_ice_18(dge,ib18,beta,omega,asy,fd)
	implicit none
	integer,parameter :: ncoef=4,nprop=4,nsb =18!! FU ICE
	real beta,omega,asy,fd
	real dge ,x1,x2,x3
	integer ib18
	

	real fuopt(ncoef,nprop,nsb)
	common /ACCESS_FUCLDPROP/ fuopt
           data fuopt / 
!!! 1       Linear_AvgSSA     47615 44500    0.210 0.225
     & -1.248936e-04,  2.530570e+00,  0.000000e+00,  0.000000e+00, 
     & -1.896739e-07,  5.831343e-07, -2.998565e-10,  1.310979e-12, 
     &  7.142005e-01,  9.102447e-04, -3.467710e-07, -1.079039e-08, 
     &  1.248021e-01,  2.672814e-04,  1.588228e-06, -1.092431e-08, 
!!! 2       Linear_AvgSSA     44500 41000    0.225 0.244
     & -1.489611e-04,  2.532245e+00,  0.000000e+00,  0.000000e+00, 
     & -1.995318e-10,  4.560241e-07, -2.010495e-10,  9.029142e-13, 
     &  7.197328e-01,  9.108377e-04, -3.024670e-07, -1.107739e-08, 
     &  1.229157e-01,  2.713058e-04,  1.586763e-06, -1.096685e-08, 
!!! 3       Linear_AvgSSA     41000 35000    0.244 0.286
     & -2.025435e-04,  2.535892e+00,  0.000000e+00,  0.000000e+00, 
     & -4.467564e-08,  2.797555e-07, -1.871537e-10,  8.266743e-13, 
     &  7.294239e-01,  9.095630e-04, -2.766369e-07, -1.133799e-08, 
     &  1.201106e-01,  2.739486e-04,  1.623034e-06, -1.120523e-08, 
!!! 4       Linear_AvgSSA     35000 33500    0.286 0.299
     & -2.359110e-04,  2.538129e+00,  0.000000e+00,  0.000000e+00, 
     & -2.645164e-07,  2.140732e-07, -2.633870e-10,  1.122039e-12, 
     &  7.343716e-01,  9.077897e-04, -2.918346e-07, -1.133916e-08, 
     &  1.188597e-01,  2.739953e-04,  1.649743e-06, -1.136785e-08, 
!!! 5       Linear_AvgSSA     33500 31008    0.299 0.322
     & -2.600973e-04,  2.540828e+00,  0.000000e+00,  0.000000e+00, 
     & -1.733744e-07,  1.716864e-07, -2.313963e-10,  9.914782e-13, 
     &  7.372457e-01,  9.027874e-04, -2.697907e-07, -1.141858e-08, 
     &  1.182038e-01,  2.718994e-04,  1.688166e-06, -1.153569e-08, 
!!! 6       Linear_AvgSSA     31008 27972    0.322 0.358
     & -2.906455e-04,  2.545052e+00,  0.000000e+00,  0.000000e+00, 
     &  1.503665e-07,  1.196637e-07, -1.187740e-10,  5.419871e-13, 
     &  7.405109e-01,  8.931465e-04, -2.148529e-07, -1.158136e-08, 
     &  1.175040e-01,  2.668971e-04,  1.761261e-06, -1.182458e-08, 
!!! 7       Linear_AvgSSA     27972 22857    0.358 0.438
     & -1.891933e-04,  2.533227e+00,  0.000000e+00,  0.000000e+00, 
     & -8.429543e-08,  7.336435e-08, -1.694428e-10,  7.657915e-13, 
     &  7.456654e-01,  8.939331e-04, -3.209749e-07, -1.111679e-08, 
     &  1.165985e-01,  2.609947e-04,  1.853193e-06, -1.220886e-08, 
!!! 8       Linear_AvgSSA     22857 20101    0.438 0.497
     & -1.249752e-05,  2.515523e+00,  0.000000e+00,  0.000000e+00, 
     &  6.848858e-07,  1.580814e-08,  1.837881e-10, -7.267522e-13, 
     &  7.488726e-01,  8.896864e-04, -3.361706e-07, -1.104171e-08, 
     &  1.158908e-01,  2.557594e-04,  1.932367e-06, -1.255515e-08, 
!!! 9       Linear_AvgSSA     20101 16807    0.497 0.595
     & -6.205467e-07,  2.514455e+00,  0.000000e+00,  0.000000e+00, 
     &  1.104342e-07,  5.670735e-08, -1.000127e-10,  4.237960e-13, 
     &  7.512777e-01,  9.005244e-04, -5.223931e-07, -1.029520e-08, 
     &  1.153906e-01,  2.536941e-04,  1.958740e-06, -1.266002e-08, 
!!!10       Linear_AvgSSA     16807 14500    0.595 0.690
     &  1.819921e-04,  2.504655e+00,  0.000000e+00,  0.000000e+00, 
     & -8.104684e-08,  1.950133e-07, -1.494991e-10,  6.142821e-13, 
     &  7.511220e-01,  9.905949e-04, -1.589628e-06, -6.315628e-09, 
     &  1.149193e-01,  2.537029e-04,  1.959855e-06, -1.267171e-08, 
!!!11       Linear_AvgSSA     14500 12600    0.690 0.794
     & -1.791770e-04,  2.533972e+00,  0.000000e+00,  0.000000e+00, 
     &  4.421723e-08,  7.239434e-07,  6.809236e-11, -4.515257e-13, 
     &  7.528708e-01,  9.848038e-04, -1.582803e-06, -6.237911e-09, 
     &  1.146047e-01,  2.502267e-04,  1.999765e-06, -1.280623e-08, 
!!!12       Linear_AvgSSA     12600 11250    0.794 0.889
     &  1.389123e-04,  2.509823e+00,  0.000000e+00,  0.000000e+00, 
     & -8.435902e-08,  2.098248e-06,  1.354481e-10, -4.981035e-13, 
     &  7.522545e-01,  1.047658e-03, -2.322640e-06, -3.486952e-09, 
     &  1.143087e-01,  2.517661e-04,  1.977616e-06, -1.272340e-08, 
!!!13       Linear_AvgSSA     11250  9600    0.889 1.042
     & -2.050787e-04,  2.534699e+00,  0.000000e+00,  0.000000e+00, 
     & -2.020119e-06,  9.950160e-06,  3.557557e-10, -1.973940e-12, 
     &  7.519605e-01,  1.093642e-03, -2.812369e-06, -1.735127e-09, 
     &  1.140476e-01,  2.460666e-04,  2.032773e-06, -1.292824e-08, 
!!!14       Linear_AvgSSA      9600  7090    1.042 1.410
     &  1.042732e-04,  2.510758e+00,  0.000000e+00,  0.000000e+00, 
     & -7.625616e-07,  5.642111e-05, -1.321302e-08,  3.234606e-11, 
     &  7.515685e-01,  1.226882e-03, -4.238619e-06,  3.503609e-09, 
     &  1.132543e-01,  2.396408e-04,  1.996457e-06, -1.279660e-08, 
!!!15  Mean_LinLog_AvgSSA      7090  5250    1.410 1.905
     & -3.072550e-04,  2.540986e+00,  0.000000e+00,  0.000000e+00, 
     &  1.277059e-04,  1.391925e-03, -5.095983e-06,  1.401950e-08, 
     &  7.532679e-01,  1.883760e-03, -9.751733e-06,  2.241490e-08, 
     &  1.123760e-01, -3.641449e-06,  2.121454e-06, -1.287871e-08, 
!!!16  Mean_LinLog_AvgSSA      5250  4000    1.905 2.500
     &  4.701372e-04,  2.489457e+00,  0.000000e+00,  0.000000e+00, 
     &  6.257120e-03,  2.507943e-03, -1.250863e-05,  3.548517e-08, 
     &  7.735658e-01,  2.249132e-03, -1.427093e-05,  3.859155e-08, 
     &  1.086614e-01, -3.355395e-04,  3.436340e-06, -1.627470e-08, 
!!!17       Linear_AvgSSA      4000  2850    2.500 3.509
     &  4.143196e-04,  2.466351e+00,  0.000000e+00,  0.000000e+00, 
     &  2.692698e-01,  1.988623e-03, -1.511522e-05,  5.025100e-08, 
     &  8.694773e-01,  1.679019e-03, -1.503882e-05,  5.041357e-08, 
     &  5.813844e-02, -4.188478e-04,  4.319855e-06, -1.751229e-08, 
!!!18       Linear_AvgSSA      2850  2500    3.509 4.000
     &  7.050865e-05,  2.525169e+00,  0.000000e+00,  0.000000e+00, 
     &  1.595273e-01,  6.413118e-03, -5.801017e-05,  1.918411e-07, 
     &  7.412006e-01,  5.273692e-03, -5.092280e-05,  1.731273e-07, 
     &  1.148588e-01, -1.976573e-03,  1.602082e-05, -5.138252e-08/

	x1=dge
	x2=x1*x1
	x3=x2*x1

	beta  =     fuopt(1,1,ib18) +    fuopt(2,1,ib18)/x1
	omega =1.0-(fuopt(1,2,ib18) + x1*fuopt(2,2,ib18)+
     &           x2*fuopt(3,2,ib18) + x3*fuopt(4,2,ib18))
 	asy   =     fuopt(1,3,ib18) + x1*fuopt(2,3,ib18)+ 
     &           x2*fuopt(3,3,ib18) + x3*fuopt(4,3,ib18)
 	fd    =     fuopt(1,4,ib18) + x1*fuopt(2,4,ib18)+ 
     &           x2*fuopt(3,4,ib18) + x3*fuopt(4,4,ib18)

       end 

!====================================================================================================
	subroutine hu_water_18_k(re,ib18,ig,beta,omega,asy)
	implicit none
	integer,parameter :: ncoef=4,nprop=3,nsb =18 !! HU WATER
	integer ir ,ib18,ig
	real beta,omega,asy,  re ,x1,x2,x3
	real huopt_k(ncoef,nprop,9)

           data huopt_k / 
!!! 1  Mean_LinLog_AvgSSA      7090  5250    1.410 1.905 K#  1
     & -9.321640e-03,  1.765382e+00,  0.000000e+00,  0.000000e+00, 
     & -5.111282e-04,  9.529625e-04, -1.394603e-05,  2.070947e-07, 
     &  7.355743e-01,  1.780027e-02, -8.246914e-04,  1.299865e-05, 
!!! 1  Mean_LinLog_AvgSSA      7090  5250    1.410 1.905 K#  2
     & -9.701230e-03,  1.773477e+00,  0.000000e+00,  0.000000e+00, 
     & -3.757408e-04,  9.218037e-04, -1.238230e-05,  1.819707e-07, 
     &  7.298693e-01,  1.855232e-02, -8.564154e-04,  1.343003e-05, 
!!! 1  Mean_LinLog_AvgSSA      7090  5250    1.410 1.905 K#  3
     & -9.565553e-03,  1.770686e+00,  0.000000e+00,  0.000000e+00, 
     & -4.362773e-04,  9.306821e-04, -1.284937e-05,  1.885209e-07, 
     &  7.319461e-01,  1.827529e-02, -8.447887e-04,  1.327356e-05, 
!!! 1  Mean_LinLog_AvgSSA      7090  5250    1.410 1.905 K#  4
     & -9.571726e-03,  1.770644e+00,  0.000000e+00,  0.000000e+00, 
     & -4.270656e-04,  9.199247e-04, -1.261811e-05,  1.846612e-07, 
     &  7.324980e-01,  1.818601e-02, -8.404167e-04,  1.320413e-05, 
!!! 1  Mean_LinLog_AvgSSA      7090  5250    1.410 1.905 K#  5
     & -9.653979e-03,  1.770711e+00,  0.000000e+00,  0.000000e+00, 
     & -2.246107e-04,  8.159575e-04, -8.748599e-06,  1.174555e-07, 
     &  7.328029e-01,  1.816223e-02, -8.385731e-04,  1.314811e-05, 
!!! 1  Mean_LinLog_AvgSSA      7090  5250    1.410 1.905 K#  6
     & -9.570753e-03,  1.766865e+00,  0.000000e+00,  0.000000e+00, 
     & -5.883124e-05,  7.330839e-04, -6.663308e-06,  8.745777e-08, 
     &  7.359717e-01,  1.770437e-02, -8.146100e-04,  1.273146e-05, 
!!! 1  Mean_LinLog_AvgSSA      7090  5250    1.410 1.905 K#  7
     & -1.011145e-02,  1.780161e+00,  0.000000e+00,  0.000000e+00, 
     & -1.983527e-04,  1.097405e-03, -1.199768e-05,  1.576995e-07, 
     &  7.309963e-01,  1.827340e-02, -8.315798e-04,  1.290748e-05, 
!!! 1  Mean_LinLog_AvgSSA      7090  5250    1.410 1.905 K#  8
     & -1.062633e-02,  1.793227e+00,  0.000000e+00,  0.000000e+00, 
     & -3.669338e-04,  1.420741e-03, -1.684903e-05,  2.222006e-07, 
     &  7.251544e-01,  1.897447e-02, -8.571182e-04,  1.323997e-05, 
!!! 1  Mean_LinLog_AvgSSA      7090  5250    1.410 1.905 K#  9
     & -1.126589e-02,  1.809453e+00,  0.000000e+00,  0.000000e+00, 
     & -5.823319e-04,  1.856578e-03, -2.293045e-05,  2.989644e-07, 
     &  7.173081e-01,  1.995432e-02, -8.951855e-04,  1.376365e-05/

	if ( ib18 .ne. 15 ) stop ' Incorrect band'
	x1=re
	x2=x1*x1
	x3=x2*x1

	beta  =     huopt_k(1,1,ig) +     huopt_k(2,1,ig)/x1
	omega =1.0-(huopt_k(1,2,ig) +  x1*huopt_k(2,2,ig)+
     &           x2*huopt_k(3,2,ig) +  x3*huopt_k(4,2,ig))
 	asy   =     huopt_k(1,3,ig) +  x1*huopt_k(2,3,ig)+ 
     &           x2*huopt_k(3,3,ig) +  x3*huopt_k(4,3,ig)

 	end 
!====================================================================================================
	subroutine hu_water_18(re,ib18,beta,omega,asy)
	implicit none
	integer,parameter :: ncoef=4,nprop=3,nsb =18 !! HU WATER
	integer ir ,ib18
	real beta,omega,asy,  re ,x1,x2,x3
	real huopt(ncoef,nprop,nsb)
	common /ACCESS_HUCLDPROP/ huopt
           data huopt / 
!!! 1       Linear_AvgSSA     34480 33500    0.290 0.299
     & -2.915626e-03,  1.583251e+00,  0.000000e+00,  0.000000e+00, 
     &  1.695919e-07,  6.862255e-07, -1.314167e-09,  3.937579e-12, 
     &  8.443129e-01,  3.771934e-03, -1.600418e-04,  2.349098e-06, 
!!! 2       Linear_AvgSSA     34480 33500    0.290 0.299
     & -2.915626e-03,  1.583251e+00,  0.000000e+00,  0.000000e+00, 
     &  1.695919e-07,  6.862255e-07, -1.314167e-09,  3.937579e-12, 
     &  8.443129e-01,  3.771934e-03, -1.600418e-04,  2.349098e-06, 
!!! 3       Linear_AvgSSA     34480 33500    0.290 0.299
     & -2.915626e-03,  1.583251e+00,  0.000000e+00,  0.000000e+00, 
     &  1.695919e-07,  6.862255e-07, -1.314167e-09,  3.937579e-12, 
     &  8.443129e-01,  3.771934e-03, -1.600418e-04,  2.349098e-06, 
!!! 4       Linear_AvgSSA     34480 33500    0.290 0.299
     & -2.915626e-03,  1.583251e+00,  0.000000e+00,  0.000000e+00, 
     &  1.695919e-07,  6.862255e-07, -1.314167e-09,  3.937579e-12, 
     &  8.443129e-01,  3.771934e-03, -1.600418e-04,  2.349098e-06, 
!!! 5       Linear_AvgSSA     33500 31008    0.299 0.322
     & -3.087733e-03,  1.587553e+00,  0.000000e+00,  0.000000e+00, 
     &  1.190114e-06,  4.320258e-07, -1.354491e-09,  4.924815e-11, 
     &  8.418716e-01,  4.236689e-03, -1.870150e-04,  2.834268e-06, 
!!! 6       Linear_AvgSSA     31008 27972    0.322 0.358
     & -3.276002e-03,  1.592811e+00,  0.000000e+00,  0.000000e+00, 
     &  5.364599e-07,  2.106785e-07,  1.816844e-09, -2.869721e-11, 
     &  8.384614e-01,  4.480160e-03, -1.969720e-04,  2.977945e-06, 
!!! 7       Linear_AvgSSA     27972 22857    0.358 0.438
     & -3.556576e-03,  1.601865e+00,  0.000000e+00,  0.000000e+00, 
     &  5.468119e-08,  5.714470e-08,  8.563077e-10, -2.137602e-11, 
     &  8.372453e-01,  4.482816e-03, -1.899086e-04,  2.811709e-06, 
!!! 8       Linear_AvgSSA     22857 20101    0.438 0.497
     & -4.114550e-03,  1.616044e+00,  0.000000e+00,  0.000000e+00, 
     &  1.027832e-07,  7.399119e-09,  1.361401e-09, -2.607222e-11, 
     &  8.284867e-01,  5.855125e-03, -2.584998e-04,  3.919443e-06, 
!!! 9       Linear_AvgSSA     20101 16807    0.497 0.595
     & -4.538592e-03,  1.628090e+00,  0.000000e+00,  0.000000e+00, 
     &  4.660222e-08,  4.424584e-08,  4.489300e-10, -1.007445e-11, 
     &  8.232674e-01,  6.455349e-03, -2.849593e-04,  4.327099e-06, 
!!!10       Linear_AvgSSA     16807 14500    0.595 0.690
     & -5.141394e-03,  1.644319e+00,  0.000000e+00,  0.000000e+00, 
     &  3.063867e-07,  2.768785e-07,  5.561766e-10, -1.657921e-11, 
     &  8.155450e-01,  7.271765e-03, -3.186095e-04,  4.807992e-06, 
!!!11       Linear_AvgSSA     14500 12600    0.690 0.794
     & -5.649932e-03,  1.657964e+00,  0.000000e+00,  0.000000e+00, 
     & -5.700053e-08,  1.087460e-06,  3.843026e-09, -1.558170e-10, 
     &  8.101794e-01,  8.063339e-03, -3.620099e-04,  5.565809e-06, 
!!!12       Linear_AvgSSA     12600 11250    0.794 0.889
     & -6.200548e-03,  1.673872e+00,  0.000000e+00,  0.000000e+00, 
     & -2.726622e-07,  3.686050e-06,  6.507939e-08, -2.106643e-09, 
     &  8.021526e-01,  8.647594e-03, -3.797480e-04,  5.764307e-06, 
!!!13       Linear_AvgSSA     11250  9600    0.889 1.042
     & -6.935215e-03,  1.693148e+00,  0.000000e+00,  0.000000e+00, 
     &  1.335500e-05,  1.976465e-05, -2.062789e-07,  3.442793e-09, 
     &  7.914170e-01,  9.928988e-03, -4.372015e-04,  6.637633e-06, 
!!!14       Linear_AvgSSA      9600  7090    1.042 1.410
     & -8.075708e-03,  1.724945e+00,  0.000000e+00,  0.000000e+00, 
     &  3.947071e-05,  2.135659e-04, -1.536978e-06,  1.986964e-08, 
     &  7.693942e-01,  1.293166e-02, -5.846796e-04,  9.048192e-06, 
!!!15  Mean_LinLog_AvgSSA      7090  5250    1.410 1.905
     & -9.769688e-03,  1.773961e+00,  0.000000e+00,  0.000000e+00, 
     & -3.072659e-04,  9.458517e-04, -1.148749e-05,  1.610947e-07, 
     &  7.316281e-01,  1.827248e-02, -8.402843e-04,  1.314493e-05, 
!!!16  Mean_LinLog_AvgSSA      5250  4000    1.905 2.500
     & -1.693383e-02,  1.915838e+00,  0.000000e+00,  0.000000e+00, 
     & -3.269320e-03,  4.657116e-03, -7.695714e-05,  9.957641e-07, 
     &  7.425068e-01,  1.479024e-02, -5.487719e-04,  7.357121e-06, 
!!!17       Linear_AvgSSA      4000  2850    2.500 3.509
     & -2.353987e-02,  2.052464e+00,  0.000000e+00,  0.000000e+00, 
     &  1.683468e-01,  3.239603e-02, -1.481804e-03,  2.313426e-05, 
     &  8.460909e-01,  8.483782e-03, -2.097465e-04,  1.536983e-06, 
!!!18       Linear_AvgSSA      2850  2500    3.509 4.000
     & -3.452320e-02,  2.267487e+00,  0.000000e+00,  0.000000e+00, 
     & -2.415707e-02,  2.175768e-02, -6.625247e-04,  9.037263e-06, 
     &  7.155353e-01,  1.045282e-02, -8.324209e-05, -2.225963e-06/ 

	x1=re
	x2=x1*x1
	x3=x2*x1

	beta  =     huopt(1,1,ib18) +     huopt(2,1,ib18)/x1
	omega =1.0-(huopt(1,2,ib18) +  x1*huopt(2,2,ib18)+
     &           x2*huopt(3,2,ib18) +  x3*huopt(4,2,ib18))
 	asy   =     huopt(1,3,ib18) +  x1*huopt(2,3,ib18)+ 
     &           x2*huopt(3,3,ib18) +  x3*huopt(4,3,ib18)

	end 


!=======================================================================
      subroutine water ( ib,icldcnd )
c ******************************************************************
c tw, ww, and www are the optical depth, single scattering albedo,
c and expansion coefficients of the phase function ( 1, 2, 3, and
c 4) due to the Mie scattering of water clouds for a given layer. 
c By using the mean single scattering properties of the eight drop
c size distributions in each spectral band, the single scattering
c properties of a water cloud with the given liquid water content
c and effective radius are obtained by interpolating (Eqs. 4.25 -
c 4.27 of Fu, 1991). 
c ******************************************************************
      USE FUINPUT
      implicit none
       integer icldcnd
      integer i,ib,j
      real re,fl,bz,wz,gz
       real ,dimension(nvx):: tw,ww
       real www(nvx,4)
      real gg,x1,x2,x3,x4

      common /wat1/ re(ncx),fl(ncx),bz(ncx,mbx),wz(ncx,mbx),gz(ncx,mbx)

      do 10 i = 1, nv
         if ( plwc(i) .lt. 1.0e-5 ) then
             tw(i) = 0.0
             ww(i) = 0.0
             www(i,1) = 0.0
             www(i,2) = 0.0
             www(i,3) = 0.0
             www(i,4) = 0.0
         else

           if ( pre(i) .lt. re(1) ) then
c            ---------------------------------------------------- 
c            A cloud with the effective radius smaller than 4.18 
c            um is assumed to have an effective radius of 4.18 um 
c            with respect to the single scattering properties. 
c            ---------------------------------------------------- 
             tw(i) = dz(i) * plwc(i) * bz(1,ib) / fl(1)
              ww(i) = wz(1,ib)
               x1 = gz(1,ib)
               x2 = x1 * gz(1,ib)
               x3 = x2 * gz(1,ib)
             x4 = x3 * gz(1,ib)
             www(i,1) = 3.0 * x1
             www(i,2) = 5.0 * x2
             www(i,3) = 7.0 * x3
             www(i,4) = 9.0 * x4

           elseif ( pre(i) .gt. re(nc) ) then
c            ---------------------------------------------------- 
c            A cloud with the effective radius larger than 31.23 
c            um is assumed to have an effective radius of 31.18 um 
c            with respect to the single scattering properties.  
c            ---------------------------------------------------- 
             tw(i) = dz(i) * plwc(i) * bz(nc,ib) / fl(nc)
             ww(i) = wz(nc,ib)
             x1 = gz(nc,ib)
               x2 = x1 * gz(nc,ib)
             x3 = x2 * gz(nc,ib)
               x4 = x3 * gz(nc,ib)
             www(i,1) = 3.0 * x1
             www(i,2) = 5.0 * x2
             www(i,3) = 7.0 * x3
             www(i,4) = 9.0 * x4

           else

             j = 1
             do while ((pre(i) .lt. re(j)).or.(pre(i) .gt. re(j+1)))
              j = j + 1
              end do

             tw(i) = dz(i) * plwc(i) * ( bz(j,ib) / fl(j) + 
     1             ( bz(j+1,ib) / fl(j+1) - bz(j,ib) / fl(j) ) / 
     1             ( 1.0 / re(j+1) - 1.0 / re(j) ) * ( 1.0 / pre(i)
     1             - 1.0 / re(j) ) )
             ww(i) = wz(j,ib) + ( wz(j+1,ib) - wz(j,ib) ) /
     1             ( re(j+1) - re(j) ) * ( pre(i) - re(j) )
             gg = gz(j,ib) + ( gz(j+1,ib) - gz(j,ib) ) /
     1         ( re(j+1) - re(j) ) * ( pre(i) - re(j) )
             x1 = gg
             x2 = x1 * gg
             x3 = x2 * gg
             x4 = x3 * gg
             www(i,1) = 3.0 * x1
             www(i,2) = 5.0 * x2
             www(i,3) = 7.0 * x3
             www(i,4) = 9.0 * x4
           endif
         endif

10      continue

       optwat(1:nv,1,icldcnd)	   = tw(1:nv)
       optwat(1:nv,2,icldcnd)	   = ww(1:nv)
       optwat(1:nv,3:6,icldcnd)   = www(1:nv,1:4)

      return
      end
!=======================================================================
	subroutine icenew ( ib,ig,icldcnd )
c *********************************************************************
c ti, wi, and wwi are the optical depth, single scattering albedo,
c and expansion coefficients of the phase function ( 1, 2, 3, and
c 4) due to the scattering of ice clouds for a given layer.
c *********************************************************************

       USE FUINPUT
       USE ICEDIRSFC,only: tau_uc,tau_co
       USE AR_ASY_FU,only: asy_smooth_rough, ir_small_large
       implicit none
       integer icldcnd
       integer ib,ibr,i,ig
	integer ib18
       real ap,bps,bpir,cp,dps
!       real dz
       real,dimension(nvx):: ti,wi
       real wwi(nvx,4)
       real f, fw, fw1, fw2, fw3, x1, x2, x3, x4
       real tau,omega,asy,betae,betaa
       real gg,fd
       real beta
       real dge_min(mbx),dge_max(mbx)
      data dge_min/9*2.,3.,3.,3.,3.,5.,9.,6.,4.,6.,11.,15.,12./
      data dge_max/8*200.,166.,2*250.,4*185.,2*250.,2*175.,2*250./
	common /ic1new/ ap(3,mbx), bps(4,mbsx), bpir(4,mbirx), 
     1                  cp(4,mbx), dps(4,mbsx)

	if (ib <= mbs) then
	 tau_uc(ib,icldcnd ) =0.0 
	 tau_co(ib,icldcnd ) =0.0
	endif
	do 10 i = 1, nv
	   if ( piwc(i) .lt. 1.0e-5 ) then
	     ti(i) = 0.0
	     wi(i) = 0.0
	     wwi(i,1) = 0.0
	     wwi(i,2) = 0.0
	     wwi(i,3) = 0.0
	     wwi(i,4) = 0.0
           else
	     fw1 = pdge(i)
	     if ( fw1 < dge_min(ib) ) fw1=dge_min(ib)	    
	      if ( fw1 > dge_max(ib) ) fw1=dge_max(ib)
	     fw2 = fw1 * fw1
	     fw3 = fw2 * fw1
	     if ( ib .le. mbs ) then
	     
!  	     if ( fi%nirold(2) .or. 
!     &  ib==1.or. ib==6 .or.ib==7.or.ib==8.or.ib==9 ) then
 	     if ( fi%nirold(2) ) then 

	        tau = dz(i) * 1000.0 * piwc(i) * ( ap(1,ib) +
     1	             ap(2,ib) / fw1 )
	        omega = 1.0 - ( bps(1,ib) + bps(2,ib) * fw1 +
     1	                bps(3,ib) * fw2 + bps(4,ib) * fw3 )
	        asy = cp(1,ib) + cp(2,ib) * fw1 +
     1                cp(3,ib) * fw2 + cp(4,ib) * fw3
	        fd = dps(1,ib) + dps(2,ib) * fw1 +
     1               dps(3,ib) * fw2 + dps(4,ib) * fw3
     	
! 		print'(a8,i4,4f12.6)', 'ICEOLD:',ib,tau,omega,asy,fd
	
!     		elseif ( ib == 2 .or. ib == 3 .or. ib == 4 .or.ib == 5 ) then
!                 call fu_ice_nir4_wgt(fw1,ib,beta ,omega,asy,fd)

		else

	        if ( ib == 1)then
		 ib18=ig
		else
		 ib18=9+ib
		endif
	         call fu_ice_18(fw1,ib18,beta ,omega,asy,fd)
	if ( fi%txt .eq. 1 .or. fi%txt .eq. 2 )
     &  call asy_smooth_rough(fi%txt, ib18, pasp(i) ,pdge(i), asy,fd ) ! ONLY takes Asy and Fd
		 tau   = dz(i) * 1000.0 * piwc(i) *beta
!		 print'(a8,i4,5f12.6)', 'ICENEW:',ib18,tau,beta,omega,asy,fd
     		endif
     
     
	        f = 0.5 / omega + fd
	        fw = f * omega
!		print*, i,ib,fw,tau,omega,f,fd
		
		
                ti(i) = ( 1.0 - fw ) * tau
		
		if (ib <= mbs ) then
!		print*,i,ib,ig,icldcnd,tau,ti(i)
		 tau_uc(ib,icldcnd) = tau_uc(ib,icldcnd) + tau
		 tau_co(ib,icldcnd) = tau_co(ib,icldcnd) + ti(i)
		
		endif	
		
                wi(i) = ( 1.0 - f ) * omega / ( 1.0 - fw )
                gg = ( asy - f ) / ( 1.0 - f )
	        x1 = gg
                x2 = x1 * gg
                x3 = x2 * gg
                x4 = x3 * gg
                wwi(i,1) = 3.0 * x1
	        wwi(i,2) = 5.0 * x2
                wwi(i,3) = 7.0 * x3
                wwi(i,4) = 9.0 * x4
!	print'(i4,11f10.4)',ib,tau,fw1,beta ,omega,asy,fd, f,fw,ti(i),wi(i),gg
             else
	        ibr = ib - mbs
		
		call ir_small_large(ibr,pdge(i),piwc(i), betae , betaa, asy )

!	        betae = piwc(i) * ( ap(1,ib) +
!     1	                ap(2,ib) / fw1 + ap(3,ib) / fw2 )
!	        betaa = piwc(i) / fw1 * ( bpir(1,ibr) + bpir(2,ibr) * 
!     1                  fw1 + bpir(3,ibr) * fw2 + bpir(4,ibr) * fw3 )
!	        asy = cp(1,ib) + cp(2,ib) * fw1 +
!     1                cp(3,ib) * fw2 + cp(4,ib) * fw3
     
                ti(i) = dz(i) * 1000.0 * betae
                wi(i) = 1.0 - betaa / betae
                gg = asy
	        x1 = gg
                x2 = x1 * gg
                x3 = x2 * gg
                x4 = x3 * gg
                wwi(i,1) = 3.0 * x1
	        wwi(i,2) = 5.0 * x2
                wwi(i,3) = 7.0 * x3
                wwi(i,4) = 9.0 * x4
           endif


  	endif
10	continue

       optice(1:nv,1,icldcnd)	   = ti(1:nv)
       optice(1:nv,2,icldcnd)	   = wi(1:nv)
       optice(1:nv,3:6,icldcnd)   = wwi(1:nv,1:4)

!	  print'(2I4,f8.1,2f8.5,6f8.3)',
!     & ib,ibr,fw1,betaa,betae,sum(ti(1:nv)),wi(25)!,wwi(25,1:4)


	return
	end subroutine icenew
c Fu 07-08-98	
c==================================================================

      block data water1
c *********************************************************************
c bz, wz and gz are the extinction coefficient(1/km), single scattering
c albedo and asymmetry factor for the water clouds (St II, Sc I, St I,
c As, Ns, Sc II, Cu, and Cb) in different bands.   re is the effective 
c radius and fl is the liquid water content (LWC).  See Tables 4.2-4.4 
c of Fu (1991).
c *********************************************************************
      USE FUINPUT, only : mbx,mbsx,mbirx,ncx
      implicit none
      real re,fl,bz,wz,gz

      common /wat1/ re(ncx),fl(ncx),bz(ncx,mbx),wz(ncx,mbx),gz(ncx,mbx)
      data re /  4.18,  5.36,  5.89,  6.16, 
     1             9.27,  9.84, 12.10, 31.23 /
      data fl / 0.05, 0.14, 0.22, 0.28,
     1            0.50, 0.47, 1.00, 2.50 /
      data bz /  15.11,  40.25,  59.81,  72.43,
     1             83.69,  73.99, 128.17, 120.91,
     a                0.,     0.,     0.,     0.,
     a                0.,     0.,     0.,     0.,
     a                0.,     0.,     0.,     0., 
     a                0.,     0.,     0.,     0., 
     a                0.,     0.,     0.,     0., 
     a                0.,     0.,     0.,     0.,     
     1             15.74,  41.70,  61.52,  74.47,
     1             85.78,  75.59, 130.46, 121.84,
     1             16.38,  43.52,  64.84,  77.97,
     1             87.31,  77.36, 134.30, 124.06,
     1             17.57,  45.78,  66.44,  80.15,
     1             90.49,  79.90, 137.56, 125.92,
     1             18.19,  46.63,  69.39,  82.20,
     1             91.46,  79.99, 138.21, 126.08,
     1             21.30,  51.88,  77.77,  87.02,
     1             94.91,  83.55, 143.46, 128.45,
     1             22.44,  57.35,  84.41, 103.50,
     1            103.49,  84.17, 152.77, 132.07,
     1             18.32,  52.69,  76.67, 100.31,
     1            105.46,  92.86, 157.82, 133.03,
     1             17.27,  50.44,  74.18,  96.76,
     1            105.32,  95.25, 158.07, 134.48,
     1             13.73,  44.90,  67.70,  90.85,
     1            109.16, 105.48, 163.11, 136.21,
     1             10.30,  36.28,  57.23,  76.43,
     1            106.45, 104.90, 161.73, 136.62,
     1              7.16,  26.40,  43.51,  57.24,
     1             92.55,  90.55, 149.10, 135.13,
     1              6.39,  21.00,  33.81,  43.36,
     1             66.90,  63.58, 113.83, 125.65,
     1             10.33,  30.87,  47.63,  60.33,
     1             79.54,  73.92, 127.46, 128.21,
     1             11.86,  35.64,  54.81,  69.85,
     1             90.39,  84.16, 142.49, 135.25,
     1             10.27,  33.08,  51.81,  67.26,
     1             93.24,  88.60, 148.71, 140.42,
     1              6.72,  24.09,  39.42,  51.68,
     1             83.34,  80.72, 140.14, 143.57,
     1              3.92,  14.76,  25.32,  32.63,
     1             60.85,  58.81, 112.30, 145.62 /
      data wz / .999999, .999999, .999999, .999999,
     1            .999998, .999999, .999998, .999997,
     a                0.,     0.,     0.,     0.,          
     a                0.,     0.,     0.,     0.,          
     a                0.,     0.,     0.,     0.,          
     a                0.,     0.,     0.,     0.,          
     a                0.,     0.,     0.,     0.,          
     a                0.,     0.,     0.,     0.,             						           
     1            .999753, .999700, .999667, .999646,
     1            .999492, .999470, .999344, .998667,
     1            .995914, .994967, .994379, .993842,
     1            .991385, .990753, .988908, .974831,
     1            .983761, .978981, .976568, .974700,
     1            .963466, .959934, .953865, .897690,
     1            .702949, .683241, .679723, .669045,
     1            .642616, .632996, .629776, .588820,
     1            .947343, .929619, .924806, .914557,
     1            .877169, .867047, .853661, .737426,
     1            .919356, .896274, .885924, .881097,
     1            .812772, .781637, .775418, .637341,
     1            .874717, .861122, .847850, .851677,
     1            .787171, .772952, .753143, .618656,
     1            .764750, .752410, .736529, .743435,
     1            .671272, .659392, .639492, .549941,
     1            .807536, .808700, .795994, .805489,
     1            .750577, .755524, .709472, .571989,
     1            .753346, .772026, .767273, .777079,
     1            .751264, .760973, .712536, .568286,
     1            .632722, .676332, .684631, .693552,
     1            .707986, .717724, .682430, .552867,
     1            .288885, .348489, .371653, .380367,
     1            .454540, .465769, .475409, .493881,
     1            .261827, .306283, .321340, .333051,
     1            .392917, .406876, .417450, .484593,
     1            .295804, .339929, .352494, .365502,
     1            .416229, .430369, .435267, .491356,
     1            .301214, .354746, .369346, .381906,
     1            .433602, .447397, .447406, .486968,
     1            .243714, .318761, .344642, .352770,
     1            .427906, .438979, .445972, .477264,
     1            .109012, .187230, .226849, .224976,
     1            .331382, .335917, .374882, .457067 /
      data gz / .838, .839, .844, .847,
     1            .849, .860, .853, .859,
     a                0.,     0.,     0.,     0.,          	
     a                0.,     0.,     0.,     0.,          	
     a                0.,     0.,     0.,     0.,          	
     a                0.,     0.,     0.,     0.,          	
     a                0.,     0.,     0.,     0.,          	
     a                0.,     0.,     0.,     0.,   	   	
     1            .809, .810, .819, .823,
     1            .823, .849, .833, .843,
     1            .774, .787, .781, .792,
     1            .812, .836, .815, .833,
     1            .801, .802, .793, .793,
     1            .814, .829, .818, .832,
     1            .877, .873, .879, .880,
     1            .885, .899, .891, .908,
     1            .783, .769, .777, .756,
     1            .764, .776, .770, .797,
     1            .818, .805, .824, .830,
     1            .815, .801, .820, .845,
     1            .810, .802, .826, .840,
     1            .829, .853, .840, .868,
     1            .774, .766, .799, .818,
     1            .815, .869, .834, .869,
     1            .734, .728, .767, .797,
     1            .796, .871, .818, .854,
     1            .693, .688, .736, .772,
     1            .780, .880, .808, .846,
     1            .643, .646, .698, .741,
     1            .759, .882, .793, .839,
     1            .564, .582, .637, .690,
     1            .719, .871, .764, .819,
     1            .466, .494, .546, .609,
     1            .651, .823, .701, .766,
     1            .375, .410, .455, .525,
     1            .583, .773, .637, .710,
     1            .262, .301, .334, .406,
     1            .485, .695, .545, .631,
     1            .144, .181, .200, .256,
     1            .352, .562, .413, .517,
     1            .060, .077, .088, .112,
     1            .181, .310, .222, .327 /
      end
	block data ice1new
c *********************************************************************
c Following Fu (1996; J. Climate) and Fu et al. (1998; J. Climate),
c ap is the empirical coefficients of Eq. (3.9a) of Fu (1996) and
c Eq. (3.1) of Fu et al. (1998) to calculate the extiction coefficient
c (1/m).  bps is for the single scattering albedo in the solar bands
c (3.9b in Fu) and bpir is for the absorption coefficient (1/m) in the
c IR bands (3.2 in Fu et al.).  cp is the empirical coefficients of
c Eq. (3.9c) in Fu or Eq. (3.3) in Fu et al. to compute the asymmetry
c factor of the phase function.  dps is the empirical coefficients of
c Eq. (3.9d) of Fu to calculate the forward delta-fraction in the 
c solar bands.  The units of generalized effective size and ice water
c content are um and g/m**3, respectively, in these equations.
c *********************************************************************

      USE FUINPUT, only : mbx,mbsx,mbirx
       implicit none
       real ap,bps,bpir,cp,dps
	common /ic1new/ ap(3,mbx), bps(4,mbsx), bpir(4, mbirx),
     1                  cp(4,mbx), dps(4,mbsx)
        data ap / 
     1           -2.9172062e-05,  2.5192544e+00,  0.0,
     2           -2.2948980e-05,  2.5212550e+00,  0.0,     
     2           -2.2948980e-05,  2.5212550e+00,  0.0,     
     2           -2.2948980e-05,  2.5212550e+00,  0.0,          
     2           -2.2948980e-05,  2.5212550e+00,  0.0,
     3           -2.9772840e-04,  2.5400320e+00,  0.0,
     4            4.2668223e-04,  2.4933372e+00,  0.0,
     5            4.3226531e-04,  2.4642946e+00,  0.0,
     6            9.5918990e-05,  2.5232218e+00,  0.0,
     7		 -2.308881e-03, 2.814002e+00, 1.072211e+00,
     8		 -2.465236e-03, 2.833187e+00,-4.227573e-01,
     9		 -3.034573e-03, 2.900043e+00,-1.849911e+00,
     x		 -4.936610e-03, 3.087764e+00,-3.884262e+00,
     1		 -8.178608e-03, 3.401245e+00,-8.812820e+00,
     2		 -8.372696e-03, 3.455018e+00,-1.516692e+01,
     3		 -1.691632e-03, 2.765756e+00,-8.331033e+00,
     4		 -4.159424e-03, 3.047325e+00,-5.061568e+00,
     5		 -9.524174e-03, 3.587742e+00,-1.068895e+01,
     6		 -1.334860e-02, 4.043808e+00,-2.171029e+01,
     7		  3.325756e-03, 2.601360e+00,-1.909602e+01,
     8		  4.919685e-03, 2.327741e+00,-1.390858e+01 /
	data bps / 
     1  1.3540265e-07,  9.9282217e-08, -7.3843168e-11,  3.3111862e-13, 
     2 -2.1458450e-06,  2.1984010e-05, -4.4225520e-09,  1.0711940e-11,     
     2 -2.1458450e-06,  2.1984010e-05, -4.4225520e-09,  1.0711940e-11,     
     2 -2.1458450e-06,  2.1984010e-05, -4.4225520e-09,  1.0711940e-11,     	 
     2 -2.1458450e-06,  2.1984010e-05, -4.4225520e-09,  1.0711940e-11,
     3  1.4027890e-04,  1.3919010e-03, -5.1005610e-06,  1.4032930e-08,
     4  5.7801650e-03,  2.4420420e-03, -1.1985030e-05,  3.3878720e-08,
     5  2.7122737e-01,  1.9809794e-03, -1.5071269e-05,  5.0103900e-08,
     6  1.6215025e-01,  6.3734393e-03, -5.7740959e-05,  1.9109300e-07 /
	data bpir /
     7	4.346482e-01, 1.721457e-02,-1.623227e-04, 5.561523e-07,
     8  7.428957e-01, 1.279601e-02,-1.391803e-04, 5.180104e-07,
     9  8.862434e-01, 1.226538e-02,-1.523076e-04, 6.000892e-07,
     x  7.152274e-01, 1.621734e-02,-1.868544e-04, 7.078738e-07,
     1  5.874323e-01, 1.876628e-02,-2.045834e-04, 7.510080e-07,
     2  5.409536e-01, 1.949649e-02,-2.050908e-04, 7.364680e-07,
     3  1.195515e+00, 3.350616e-03,-5.266996e-05, 2.233377e-07,
     4  1.466481e+00,-2.129226e-03,-1.361630e-05, 1.193649e-07,
     5  9.551440e-01, 1.309792e-02,-1.793694e-04, 7.313392e-07,
     6  3.003701e-01, 2.051529e-02,-1.931684e-04, 6.583031e-07,
     7  2.005578e-01, 2.132614e-02,-1.751052e-04, 5.355885e-07,
     8  8.869787e-01, 2.118409e-02,-2.781429e-04, 1.094562e-06 /
	data cp / 
     1  7.4812728e-01,  9.5684492e-04, -1.1151708e-06, -8.1557303e-09,  
     2  7.5212480e-01,  1.1045100e-03, -2.9157100e-06, -1.3429900e-09,     
     2  7.5212480e-01,  1.1045100e-03, -2.9157100e-06, -1.3429900e-09,     
     2  7.5212480e-01,  1.1045100e-03, -2.9157100e-06, -1.3429900e-09,         
     2  7.5212480e-01,  1.1045100e-03, -2.9157100e-06, -1.3429900e-09,
     3  7.5320460e-01,  1.8845180e-03, -9.7571460e-06,  2.2428270e-08,
     4  7.7381780e-01,  2.2260760e-03, -1.4052790e-05,  3.7896870e-08,
     5  8.7020490e-01,  1.6645530e-03, -1.4886030e-05,  4.9867270e-08,
     6  7.4212060e-01,  5.2621900e-03, -5.0877550e-05,  1.7307870e-07,
     7  7.962716e-01, 3.003488e-03,-2.082376e-05, 5.366545e-08,
     8  8.472918e-01, 2.559953e-03,-2.182660e-05, 6.879977e-08,
     9  8.741665e-01, 2.455409e-03,-2.456935e-05, 8.641223e-08,
     x  8.522816e-01, 2.523627e-03,-2.149196e-05, 6.685067e-08,
     1  8.609604e-01, 2.200445e-03,-1.748105e-05, 5.176616e-08,
     2  8.906280e-01, 1.903269e-03,-1.733552e-05, 5.855071e-08,
     3  8.663385e-01, 2.797934e-03,-3.187011e-05, 1.217209e-07,
     4  7.984021e-01, 3.977117e-03,-4.471984e-05, 1.694919e-07,
     5  7.363466e-01, 4.798266e-03,-4.513292e-05, 1.525774e-07,
     6  7.260484e-01, 2.664334e-03,-1.251136e-05, 2.243377e-08,
     7  6.891414e-01, 6.192281e-03,-6.459514e-05, 2.436963e-07,
     8  4.949276e-01, 1.186174e-02,-1.267629e-04, 4.603574e-07 /
	data dps / 
     1  1.1572963e-01,  2.5648064e-04,  1.9131293e-06, -1.2460341e-08,
     2  1.1360752e-01,  2.4156171e-04,  2.0185942e-06, -1.2876106e-08,     
     2  1.1360752e-01,  2.4156171e-04,  2.0185942e-06, -1.2876106e-08,     
     2  1.1360752e-01,  2.4156171e-04,  2.0185942e-06, -1.2876106e-08,     
     2  1.1360752e-01,  2.4156171e-04,  2.0185942e-06, -1.2876106e-08,
     3  1.1241170e-01, -1.7635186e-07,  2.1499248e-06, -1.2949304e-08,
     4  1.0855775e-01, -3.2496217e-04,  3.4207304e-06, -1.6247759e-08,
     5  5.7783360e-02, -4.1158260e-04,  4.2361240e-06, -1.7204950e-08,
     6  1.1367129e-01, -1.9711061e-03,  1.6078010e-05, -5.1736898e-08 /
c **********************************************************************
	end
!=======================================================================

      subroutine water_hu ( ib,ig,icldcnd )
c ******************************************************************
c tw, ww, and www are the optical depth, single scattering albedo,
c and expansion coefficients of the phase function ( 1, 2, 3, and
c 4) due to the Mie scattering of water clouds for a given layer. 
c ******************************************************************
	USE FUINPUT
       USE ICEDIRSFC,only: tau_uc,tau_co
        implicit none
       integer icldcnd
      integer i,ib,j
	integer ig,ib18
	real beta,omega,tau
      real re,fl,bz,wz,gz
      real gg,x1,x2,x3,x4


	real ,dimension(nvx):: tw,ww
        real www(nvx,4)
	real xre,bext,coalb,asy,trc,trcasy

!      common /clouds/ pre(nvx), plwc(nvx), pde(nvx), piwc(nvx)

!      common /wat/ tw(nvx), ww(nvx), www(nvx,4)
      common /wat/ tw, ww, www
      do i = 1, nv
         if ( plwc(i) .lt. 1.0e-5 ) then
             tw(i) = 0.0
             ww(i) = 0.0
             www(i,1) = 0.0
             www(i,2) = 0.0
             www(i,3) = 0.0
             www(i,4) = 0.0
         else

	xre=pre(i)

	if ( fi%nirold(3)  ) then

	  if ( xre <= 20. )then
	   call cldopt_l20(ib,xre,bext,coalb,asy)
	   else
	   call cldopt_g20(ib,xre,bext,coalb,asy,trc,trcasy)
	  endif
	
!	print'(a6,i3,5f12.5)','OLDHU:', ib,xre,bext,coalb,asy,
!     &dz(i) * plwc(i) * bext
     
!	elseif (  ib >= 2 .and. ib <=5 ) then
!	 call hu_water_nir4(xre,ib, bext,coalb,asy)	
!	  print'(a6,i3,5f12.5)','NEWHU:', ib,xre,bext,coalb,asy,
!     &dz(i) * plwc(i) * bext
	

	else

	        if ( ib == 1)then
		 ib18=ig
		else
		 ib18=9+ib
		endif

	  if ( ib18 /= 15 .or.        fi%nirold(5))
     &  call hu_water_18(xre,ib18,beta,omega,asy)

	  if ( ib18 == 15  .and. .not.fi%nirold(5)) 
     &  call hu_water_18_k(xre,ib18,ig,beta,omega,asy)
		 bext  = beta*1000.
		 coalb = 1.0-omega
                 tau = dz(i) * plwc(i) * bext
!		print'(a8,2i4,5f12.6)','WATNEW:',ib18,ig,tau,beta,omega,asy
     		endif
     
	
		     tw(i) = dz(i) * plwc(i) * bext  ! TAU from extinction
! Mixed phase code attempt revised 10-12-2010

	    tau_uc(ib,icldcnd) = tau_uc(ib,icldcnd) + tw(i)
	    tau_co(ib,icldcnd) = tau_co(ib,icldcnd) + tw(i)
   
     
		     ww(i) = 1.0000 - coalb  !SSA
		     gg    =   asy !ASY

		      x1=  gg
                      x2 = x1 * x1
                      x3 = x2 * x1
                      x4 = x3 * x1
             www(i,1) = 3.0 * x1
             www(i,2) = 5.0 * x2
             www(i,3) = 7.0 * x3
             www(i,4) = 9.0 * x4
!!!	   print'(I5,f10.2,f10.4,f10.6,f10.2)',ib,pre(i),gg,ww(i),bext
	endif

	enddo


       optwat(1:nv,1,icldcnd)	   = tw(1:nv)
       optwat(1:nv,2,icldcnd)	   = ww(1:nv)
       optwat(1:nv,3:6,icldcnd)   = www(1:nv,1:4)

!
! Mixed phase code attempt revised 10-12-2010



	return
	end
!============================================================================
c   Fu-Liou band water cloud optical properties:
c   (if you have questions, please call Yong Hu at 757-864-9824
c                                 or email yhu@adm.larc.nasa.gov )
c----------------------------------------------------------------------------
c
c   The cloud optical properties parameterization code for Fu-Liou bands
cc   PARTICLE SIZE LESS THAN 20 MICRON
	subroutine cldopt_l20(iband,xre,bext,coalb,asy)
c
c   input variables:
c     iband:   the fu-liou band ( 1 - 6 )
c                iband=1: 0.2-0.7; iband=2: 0.7-1.3, ...
c!!NO     xlwp:   liquid water path  ( gram per square meter ) 
c     xre:    effective droplet size
c
c
        real xlwp,xre
	integer iband

c   output variables:
c     bext:  extinction coefficient  
c     coalb:  co-albedo ( = 1. - s.s.a ) 
c     asy:   asymmetry factor
c
        real bext,coalb,asy
c
	real coefbt(4),coefca(4),coefas(4)
	real coefbt1(4),coefca1(4),coefas1(4)
	real coefbt2(4),coefca2(4),coefas2(4)
	real coefbt3(4),coefca3(4),coefas3(4)
	real coefbt4(4),coefca4(4),coefas4(4)
	real coefbt5(4),coefca5(4),coefas5(4)
	real coefbt6(4),coefca6(4),coefas6(4)

	integer i
	real xxre

      data coefbt1/-0.50313E-03, 0.15272E+01, 0.45841E+00,-0.29436E+00/
      data coefca1/-0.36882E-06, 0.30867E-06,-0.22233E-07, 0.71604E-09/
      data coefas1/ 0.80079E+00, 0.11321E-01,-0.64926E-03, 0.12850E-04/

      data coefbt2/-0.75121E-03, 0.15492E+01, 0.57192E+00,-0.53427E-01/
      data coefca2/ 0.48969E-05, 0.30593E-04, 0.37730E-07,-0.49663E-08/
      data coefas2/ 0.70709E+00, 0.32338E-01,-0.22309E-02, 0.50809E-04/

      data coefbt3/-0.22040E-02, 0.16009E+01, 0.50647E+00, 0.86071E+00/
      data coefca3/-0.70109E-03, 0.14401E-02,-0.28917E-04, 0.60054E-06/
      data coefas3/ 0.70192E+00, 0.30346E-01,-0.19202E-02, 0.41345E-04/

      data coefbt4/-0.11612E-01, 0.19447E+01,-0.27681E+01, 0.11911E+02/
      data coefca4/-0.91441E-02, 0.75884E-02,-0.24023E-03, 0.46077E-05/
      data coefas4/ 0.85008E+00,-0.11273E-01, 0.15253E-02,-0.43008E-04/

      data coefbt5/ 0.48334E-02, 0.13934E+01, 0.28501E+01,-0.35198E+01/
      data coefca5/ 0.18698E+00, 0.32091E-01,-0.19028E-02, 0.39806E-04/
      data coefas5/ 0.85272E+00, 0.16497E-01,-0.97105E-03, 0.19844E-04/

      data coefbt6/ 0.52556E-02, 0.14316E+01, 0.24743E+01, 0.16562E+01/
      data coefca6/-0.28624E-01, 0.21779E-01,-0.79026E-03, 0.13885E-04/
      data coefas6/ 0.90047E+00,-0.41211E-01, 0.42051E-02,-0.10977E-03/

	if (iband.eq.1) then
	 do i=1,4
	  coefbt(i)=coefbt1(i)
	  coefca(i)=coefca1(i)
	  coefas(i)=coefas1(i)
	 enddo
	endif
	if (iband.eq.2 .or.iband.eq.3 .or.iband.eq.4 .or.iband.eq.5) then
	 do i=1,4
	  coefbt(i)=coefbt2(i)
	  coefca(i)=coefca2(i)
	  coefas(i)=coefas2(i)
	 enddo
	endif
	if (iband.eq.6) then
	 do i=1,4
	  coefbt(i)=coefbt3(i)
	  coefca(i)=coefca3(i)
	  coefas(i)=coefas3(i)
	 enddo
	endif
	if (iband.eq.7) then
	 do i=1,4
	  coefbt(i)=coefbt4(i)
	  coefca(i)=coefca4(i)
	  coefas(i)=coefas4(i)
	 enddo
	endif
	if (iband.eq.8) then
	 do i=1,4
	  coefbt(i)=coefbt5(i)
	  coefca(i)=coefca5(i)
	  coefas(i)=coefas5(i)
	 enddo
	endif
	if (iband.eq.9) then
	 do i=1,4
	  coefbt(i)=coefbt6(i)
	  coefca(i)=coefca6(i)
	  coefas(i)=coefas6(i)
	 enddo
	endif

	xxre = 1./xre
	bext = 0.
	coalb = 0.
	asy = 0.
	do i = 1,4
	 bext=bext+coefbt(i)*xxre**(i-1.) 
	 coalb=coalb+coefca(i)*xre**(i-1.) 
	 asy=asy+coefas(i)*xre**(i-1.) 
	enddo
	bext= bext*1000. !! (m2g-1) --> (km-1 m3g-1)
!TAU	bext=bext*xlwp
	return
	end
c
c----------------------------------------------------------------------------
c
c   The cloud optical properties parameterization code for Fu-Liou bands
c   PARTICLE SIZE GREATER THAN 20 MICRON
	subroutine cldopt_g20(iband,xre,bext,coalb,asy,trc,trcasy)
c
c   input variables:
c     iband:   the fu-liou band ( 1 - 6 )
c                iband=1: 0.2-0.7; iband=2: 0.7-1.3, ...
c !!NO    xlwp:   liquid water path  ( gram per square meter ) 
c     xre:    effective droplet size
c
c
        real xlwp,xre
	integer iband

c   output variables:
c     bext:  extinction coefficient  
c     coalb:  co-albedo ( = 1. - s.s.a ) 
c     asy:   asymmetry factor
c
        real bext,coalb,asy,trc,trcasy
c
	real coefbt(4),coefca(4),coefas(4),coeftr(4),coefta(4)
	real coefbt1(4),coefca1(4),coefas1(4),coeftr1(4),coefta1(4)
	real coefbt2(4),coefca2(4),coefas2(4),coeftr2(4),coefta2(4)
	real coefbt3(4),coefca3(4),coefas3(4),coeftr3(4),coefta3(4)
	real coefbt4(4),coefca4(4),coefas4(4),coeftr4(4),coefta4(4)
	real coefbt5(4),coefca5(4),coefas5(4),coeftr5(4),coefta5(4)
	real coefbt6(4),coefca6(4),coefas6(4),coeftr6(4),coefta6(4)

	integer i
	real xxre

      data coefbt1/ 0.23418E-01,-0.32565E+00, 0.48340E+02,-0.41043E+03/
      data coefca1/-0.21786E-04, 0.26767E-05,-0.10008E-06, 0.12921E-08/
      data coefas1/ 0.84794E+00, 0.14857E-02,-0.67237E-05,-0.40686E-06/
      data coeftr1/-0.52739E+00, 0.11323E+00,-0.42522E-02, 0.53457E-04/
      data coefta1/ 0.90311E+00,-0.18028E-01, 0.77449E-03,-0.10696E-04/

      data coefbt2/ 0.67806E-02, 0.96850E+00, 0.15519E+02,-0.12923E+03/
      data coefca2/ 0.44711E-02,-0.51398E-03, 0.22043E-04,-0.29747E-06/
      data coefas2/ 0.67621E+00, 0.20439E-01,-0.71104E-03, 0.83388E-05/
      data coeftr2/ 0.60176E+00,-0.23758E-01, 0.11284E-02,-0.16278E-04/
      data coefta2/ 0.90592E+00,-0.16972E-01, 0.67994E-03,-0.88442E-05/

      data coefbt3/ 0.18332E-02, 0.13641E+01, 0.57843E+01,-0.42550E+02/
      data coefca3/-0.21214E-01, 0.37580E-02,-0.11065E-03, 0.14348E-05/
      data coefas3/ 0.74915E+00, 0.12089E-01,-0.38639E-03, 0.43741E-05/
      data coeftr3/ 0.32956E+00, 0.67449E-02,-0.49333E-04,-0.44926E-06/
      data coefta3/ 0.82010E+00,-0.60738E-02, 0.24663E-03,-0.29954E-05/

      data coefbt4/ 0.10629E-01, 0.68353E+00, 0.23881E+02,-0.19519E+03/
      data coefca4/-0.25940E-02, 0.55061E-02,-0.74017E-04, 0.69346E-06/
      data coefas4/ 0.81411E+00, 0.46326E-02,-0.38183E-04,-0.59648E-06/
      data coeftr4/ 0.19206E+00, 0.20226E-01,-0.44379E-03, 0.42292E-05/
      data coefta4/ 0.78841E+00,-0.16535E-02, 0.15572E-03,-0.28824E-05/

      data coefbt5/ 0.71208E-02, 0.97718E+00, 0.16073E+02,-0.12230E+03/
      data coefca5/ 0.32924E+00, 0.31633E-02,-0.31895E-05,-0.62926E-06/
      data coefas5/ 0.80288E+00, 0.15341E-01,-0.51183E-03, 0.57613E-05/
      data coeftr5/ 0.21655E+00, 0.40081E-01,-0.10761E-02, 0.10858E-04/
      data coefta5/ 0.78023E+00, 0.10683E-01,-0.45877E-03, 0.55770E-05/

      data coefbt6/ 0.96706E-02, 0.76972E+00, 0.22557E+02,-0.17571E+03/
      data coefca6/ 0.10667E+00, 0.20174E-02, 0.21095E-03,-0.36733E-05/
      data coefas6/ 0.58782E+00, 0.28048E-01,-0.89508E-03, 0.10214E-04/
      data coeftr6/-0.22692E+00, 0.55017E-01,-0.14222E-02, 0.14334E-04/
      data coefta6/ 0.60193E+00, 0.20226E-01,-0.74250E-03, 0.91387E-05/

	if (iband.eq.1) then
	 do i=1,4
	  coefbt(i)=coefbt1(i)
	  coefca(i)=coefca1(i)
	  coefas(i)=coefas1(i)
	  coeftr(i)=coeftr1(i)
	  coefta(i)=coefta1(i)
	 enddo
	endif
	if (iband.eq.2 .or.iband.eq.3 .or.iband.eq.4 .or.iband.eq.5) then
	 do i=1,4
	  coefbt(i)=coefbt2(i)
	  coefca(i)=coefca2(i)
	  coefas(i)=coefas2(i)
	  coeftr(i)=coeftr2(i)
	  coefta(i)=coefta2(i)
	 enddo
	endif
	if (iband.eq.6) then
	 do i=1,4
	  coefbt(i)=coefbt3(i)
	  coefca(i)=coefca3(i)
	  coefas(i)=coefas3(i)
	  coeftr(i)=coeftr3(i)
	  coefta(i)=coefta3(i)
	 enddo
	endif
	if (iband.eq.7) then
	 do i=1,4
	  coefbt(i)=coefbt4(i)
	  coefca(i)=coefca4(i)
	  coefas(i)=coefas4(i)
	  coeftr(i)=coeftr4(i)
	  coefta(i)=coefta4(i)
	 enddo
	endif
	if (iband.eq.8) then
	 do i=1,4
	  coefbt(i)=coefbt5(i)
	  coefca(i)=coefca5(i)
	  coefas(i)=coefas5(i)
	  coeftr(i)=coeftr5(i)
	  coefta(i)=coefta5(i)
	 enddo
	endif
	if (iband.eq.9) then
	 do i=1,4
	  coefbt(i)=coefbt6(i)
	  coefca(i)=coefca6(i)
	  coefas(i)=coefas6(i)
	  coeftr(i)=coeftr6(i)
	  coefta(i)=coefta6(i)
	 enddo
	endif

	xxre = 1./xre
	bext = 0.
	coalb = 0.
	asy = 0.
	trc = 0.
	trcasy = 0.
	do i = 1,4
	 bext=bext+coefbt(i)*xxre**(i-1.) 
	 coalb=coalb+coefca(i)*xre**(i-1.) 
	 asy=asy+coefas(i)*xre**(i-1.) 
	 trc=trc+coeftr(i)*xre**(i-1.) 
	 trcasy=trcasy+coefta(i)*xre**(i-1.) 
	enddo
	bext= bext*1000. !! (m2g-1) --> (km-1 m3g-1)
!!! TAU	bext=bext*xlwp
	return
	end
